import dotenv from "dotenv";
import { NextResponse } from "next/server";
import { currentUser } from "@clerk/nextjs";

import prismadb from "@/lib/prismadb";
import * as chatpdf from "@/lib/chatpdf";

dotenv.config({ path: `.env` });

export async function POST(
    request: Request,
    { params }: { params: { chatId: string } }
  ) {
    try {
      const { prompt } = await request.json();
      const user = await currentUser();
  
      if (!user || !user.firstName || !user.id) {
        return new NextResponse("Unauthorized", { status: 401 });
      }
  
      const companion = await prismadb.companion.findUnique({
        where: {
          id: params.chatId,
        },
      });
  
      if (!companion || !companion.chatPdfId) {
        return new NextResponse("Companion or ChatPDF ID not found", { status: 404 });
      }
  
      const formattedChatPdfId = "cha_" + companion.chatPdfId;
  
      const aiResponse = await chatpdf.chatWithPdf(formattedChatPdfId, [
        {
          role: 'user',
          content: prompt,
        },
      ]);
  
      console.log(aiResponse);
  
      if (aiResponse) {
        // Update the companion messages in the database
        await prismadb.companion.update({
          where: {
            id: params.chatId,
          },
          data: {
            messages: {
              create: {
                content: aiResponse,
                role: "system",
                userId: user.id,
              },
            },
          },
        });
  
        // Send the response back
        return new NextResponse(aiResponse);
      } else {
        return new NextResponse("No response from ChatPDF", { status: 500 });
      }
    } catch (error) {
      if (error instanceof Error) {
        console.error('[CONVERSATION_ERROR]', error.message);
        console.error('Error Stack:', error.stack);
      } else {
        console.error('[CONVERSATION_ERROR]', 'An unknown error occurred.');
      }
      return new NextResponse("Internal Error", { status: 500 });
    }  
  };
